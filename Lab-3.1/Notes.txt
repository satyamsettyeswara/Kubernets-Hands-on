Going Deeper into Kubernetes Networking
We'll cover:

How ClusterIP works

Using kubectl port-forward for local testing

Pod-to-Pod communication

DNS inside the cluster

‚úÖ Step 1: Understanding ClusterIP (Default Service Type)
Let‚Äôs expose the Nginx deployment using the default service type: ClusterIP:

bash
Copy
Edit
kubectl expose deployment nginx-deployment --port=80 --target-port=80 --type=ClusterIP
Check the service:

bash
Copy
Edit
kubectl get service
You‚Äôll see an internal IP like 10.96.0.1‚Äîthis is not accessible from outside, only from inside the cluster.

‚úÖ Step 2: Testing Access from Inside the Cluster
To test this, we‚Äôll spin up a temporary debug Pod with curl or wget:

bash
Copy
Edit
kubectl run debug-pod --image=busybox --restart=Never --stdin --tty
Inside that shell, try:

sh
Copy
Edit
wget -O- http://nginx-deployment
nginx-deployment is the DNS name of the service.

Type exit to quit the shell.

If that works, üéâ your DNS and internal service networking are working fine.

‚úÖ Step 3: kubectl port-forward (Local Access Without NodePort)
This is useful when you don‚Äôt want to expose a service permanently.

Run:

bash
Copy
Edit
kubectl port-forward deployment/nginx-deployment 8080:80
Then go to your browser and open:

arduino
Copy
Edit
http://localhost:8080
You‚Äôll see the Nginx welcome page ‚Äî this is forwarding port 8080 on your host to port 80 on the deployment.

Tip: Keep this in mind for testing things without needing a service or ingress.

‚úÖ Step 4: Clean Up (Optional)
If you want to clean things:

bash
Copy
Edit
kubectl delete service nginx-deployment
kubectl delete pod debug-pod



------------------------------

LoadBalancer Service Type
Only works on cloud environments like GKE, EKS, or AKS.

On Minikube, it doesn‚Äôt create an actual cloud load balancer, but you can simulate it.

So if you're curious to see how LoadBalancer works in Minikube, we can try it out using:

bash
Copy
Edit
minikube tunnel
This gives you a fake LoadBalancer IP you can test locally.

‚öôÔ∏è Want to Try It? Here's How:
Expose the deployment as LoadBalancer:

bash
Copy
Edit
kubectl expose deployment nginx-deployment --port=80 --target-port=80 --type=LoadBalancer
Start Minikube tunnel (in a new terminal):

bash
Copy
Edit
minikube tunnel
It may ask for sudo privileges.

Check the service for external IP:

bash
Copy
Edit
kubectl get service nginx-deployment
You‚Äôll now see a proper EXTERNAL-IP assigned!

Test it in your browser:

cpp
Copy
Edit
http://<EXTERNAL-IP>

-----

tep-by-Step: Simulated LoadBalancer in Minikube
‚úÖ Step 1: Recreate or Use the Nginx Deployment
If it‚Äôs already running, skip this. Otherwise:

bash
Copy
Edit
kubectl apply -f nginx-deployment.yaml
‚úÖ Step 2: Expose It Using LoadBalancer
bash
Copy
Edit
kubectl expose deployment nginx-deployment --port=80 --target-port=80 --type=LoadBalancer
Now check the service:

bash
Copy
Edit
kubectl get service nginx-deployment
You'll likely see:

pgsql
Copy
Edit
NAME               TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)
nginx-deployment   LoadBalancer   10.96.166.222    <pending>     80:xxxxx/TCP
‚úÖ Step 3: Start the Tunnel
Open another terminal and run:

bash
Copy
Edit
minikube tunnel
‚ö†Ô∏è You‚Äôll probably be prompted for your password (it uses admin rights to set up routing).

‚úÖ Step 4: Get the External IP
Now re-run this command in your first terminal:

bash
Copy
Edit
kubectl get service nginx-deployment
You should now see a proper external IP like:

arduino
Copy
Edit
EXTERNAL-IP: 127.0.0.1 or 192.168.x.x
‚úÖ Step 5: Test It
Open your browser and go to:

cpp
Copy
Edit
http://<EXTERNAL-IP>
You should see the Nginx welcome page üéâ

‚úÖ Step 6: Clean Up (Optional)
To delete the service:

bash
Copy
Edit
kubectl delete service nginx-deployment
Stop the tunnel (just press Ctrl+C in the terminal running it).

